// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package ImmutableCreate2Factory --cli --struct ImmutableCreate2Factory --output bindings/ImmutableCreate2Factory/ImmutableCreate2Factory.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ImmutableCreate2Factory

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ImmutableCreate2FactoryMetaData contains all meta data concerning the ImmutableCreate2Factory contract.
var ImmutableCreate2FactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"name\":\"safeCreate2\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"findCreate2Address\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"findCreate2AddressViaHash\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610833806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a7230582000b83240d6a142e399c7c44e5b6473d34001d171630229df870513bfb4740e2d64736f6c634300050a0032",
}

// ImmutableCreate2FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use ImmutableCreate2FactoryMetaData.ABI instead.
var ImmutableCreate2FactoryABI = ImmutableCreate2FactoryMetaData.ABI

// ImmutableCreate2FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ImmutableCreate2FactoryMetaData.Bin instead.
var ImmutableCreate2FactoryBin = ImmutableCreate2FactoryMetaData.Bin

// DeployImmutableCreate2Factory deploys a new Ethereum contract, binding an instance of ImmutableCreate2Factory to it.
func DeployImmutableCreate2Factory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ImmutableCreate2Factory, error) {
	parsed, err := ImmutableCreate2FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ImmutableCreate2FactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ImmutableCreate2Factory{ImmutableCreate2FactoryCaller: ImmutableCreate2FactoryCaller{contract: contract}, ImmutableCreate2FactoryTransactor: ImmutableCreate2FactoryTransactor{contract: contract}, ImmutableCreate2FactoryFilterer: ImmutableCreate2FactoryFilterer{contract: contract}}, nil
}

// ImmutableCreate2Factory is an auto generated Go binding around an Ethereum contract.
type ImmutableCreate2Factory struct {
	ImmutableCreate2FactoryCaller     // Read-only binding to the contract
	ImmutableCreate2FactoryTransactor // Write-only binding to the contract
	ImmutableCreate2FactoryFilterer   // Log filterer for contract events
}

// ImmutableCreate2FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ImmutableCreate2FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImmutableCreate2FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ImmutableCreate2FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImmutableCreate2FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ImmutableCreate2FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImmutableCreate2FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ImmutableCreate2FactorySession struct {
	Contract     *ImmutableCreate2Factory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ImmutableCreate2FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ImmutableCreate2FactoryCallerSession struct {
	Contract *ImmutableCreate2FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ImmutableCreate2FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ImmutableCreate2FactoryTransactorSession struct {
	Contract     *ImmutableCreate2FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ImmutableCreate2FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ImmutableCreate2FactoryRaw struct {
	Contract *ImmutableCreate2Factory // Generic contract binding to access the raw methods on
}

// ImmutableCreate2FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ImmutableCreate2FactoryCallerRaw struct {
	Contract *ImmutableCreate2FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// ImmutableCreate2FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ImmutableCreate2FactoryTransactorRaw struct {
	Contract *ImmutableCreate2FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewImmutableCreate2Factory creates a new instance of ImmutableCreate2Factory, bound to a specific deployed contract.
func NewImmutableCreate2Factory(address common.Address, backend bind.ContractBackend) (*ImmutableCreate2Factory, error) {
	contract, err := bindImmutableCreate2Factory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ImmutableCreate2Factory{ImmutableCreate2FactoryCaller: ImmutableCreate2FactoryCaller{contract: contract}, ImmutableCreate2FactoryTransactor: ImmutableCreate2FactoryTransactor{contract: contract}, ImmutableCreate2FactoryFilterer: ImmutableCreate2FactoryFilterer{contract: contract}}, nil
}

// NewImmutableCreate2FactoryCaller creates a new read-only instance of ImmutableCreate2Factory, bound to a specific deployed contract.
func NewImmutableCreate2FactoryCaller(address common.Address, caller bind.ContractCaller) (*ImmutableCreate2FactoryCaller, error) {
	contract, err := bindImmutableCreate2Factory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ImmutableCreate2FactoryCaller{contract: contract}, nil
}

// NewImmutableCreate2FactoryTransactor creates a new write-only instance of ImmutableCreate2Factory, bound to a specific deployed contract.
func NewImmutableCreate2FactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*ImmutableCreate2FactoryTransactor, error) {
	contract, err := bindImmutableCreate2Factory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ImmutableCreate2FactoryTransactor{contract: contract}, nil
}

// NewImmutableCreate2FactoryFilterer creates a new log filterer instance of ImmutableCreate2Factory, bound to a specific deployed contract.
func NewImmutableCreate2FactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*ImmutableCreate2FactoryFilterer, error) {
	contract, err := bindImmutableCreate2Factory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ImmutableCreate2FactoryFilterer{contract: contract}, nil
}

// bindImmutableCreate2Factory binds a generic wrapper to an already deployed contract.
func bindImmutableCreate2Factory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ImmutableCreate2FactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ImmutableCreate2Factory.Contract.ImmutableCreate2FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.ImmutableCreate2FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.ImmutableCreate2FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ImmutableCreate2Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.contract.Transact(opts, method, params...)
}

// FindCreate2Address is a free data retrieval call binding the contract method 0x85cf97ab.
//
// Solidity: function findCreate2Address(bytes32 salt, bytes initCode) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCaller) FindCreate2Address(opts *bind.CallOpts, salt [32]byte, initCode []byte) (common.Address, error) {
	var out []interface{}
	err := _ImmutableCreate2Factory.contract.Call(opts, &out, "findCreate2Address", salt, initCode)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindCreate2Address is a free data retrieval call binding the contract method 0x85cf97ab.
//
// Solidity: function findCreate2Address(bytes32 salt, bytes initCode) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactorySession) FindCreate2Address(salt [32]byte, initCode []byte) (common.Address, error) {
	return _ImmutableCreate2Factory.Contract.FindCreate2Address(&_ImmutableCreate2Factory.CallOpts, salt, initCode)
}

// FindCreate2Address is a free data retrieval call binding the contract method 0x85cf97ab.
//
// Solidity: function findCreate2Address(bytes32 salt, bytes initCode) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCallerSession) FindCreate2Address(salt [32]byte, initCode []byte) (common.Address, error) {
	return _ImmutableCreate2Factory.Contract.FindCreate2Address(&_ImmutableCreate2Factory.CallOpts, salt, initCode)
}

// FindCreate2AddressViaHash is a free data retrieval call binding the contract method 0xa49a7c90.
//
// Solidity: function findCreate2AddressViaHash(bytes32 salt, bytes32 initCodeHash) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCaller) FindCreate2AddressViaHash(opts *bind.CallOpts, salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ImmutableCreate2Factory.contract.Call(opts, &out, "findCreate2AddressViaHash", salt, initCodeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindCreate2AddressViaHash is a free data retrieval call binding the contract method 0xa49a7c90.
//
// Solidity: function findCreate2AddressViaHash(bytes32 salt, bytes32 initCodeHash) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactorySession) FindCreate2AddressViaHash(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _ImmutableCreate2Factory.Contract.FindCreate2AddressViaHash(&_ImmutableCreate2Factory.CallOpts, salt, initCodeHash)
}

// FindCreate2AddressViaHash is a free data retrieval call binding the contract method 0xa49a7c90.
//
// Solidity: function findCreate2AddressViaHash(bytes32 salt, bytes32 initCodeHash) view returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCallerSession) FindCreate2AddressViaHash(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _ImmutableCreate2Factory.Contract.FindCreate2AddressViaHash(&_ImmutableCreate2Factory.CallOpts, salt, initCodeHash)
}

// HasBeenDeployed is a free data retrieval call binding the contract method 0x08508b8f.
//
// Solidity: function hasBeenDeployed(address deploymentAddress) view returns(bool)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCaller) HasBeenDeployed(opts *bind.CallOpts, deploymentAddress common.Address) (bool, error) {
	var out []interface{}
	err := _ImmutableCreate2Factory.contract.Call(opts, &out, "hasBeenDeployed", deploymentAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasBeenDeployed is a free data retrieval call binding the contract method 0x08508b8f.
//
// Solidity: function hasBeenDeployed(address deploymentAddress) view returns(bool)
func (_ImmutableCreate2Factory *ImmutableCreate2FactorySession) HasBeenDeployed(deploymentAddress common.Address) (bool, error) {
	return _ImmutableCreate2Factory.Contract.HasBeenDeployed(&_ImmutableCreate2Factory.CallOpts, deploymentAddress)
}

// HasBeenDeployed is a free data retrieval call binding the contract method 0x08508b8f.
//
// Solidity: function hasBeenDeployed(address deploymentAddress) view returns(bool)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryCallerSession) HasBeenDeployed(deploymentAddress common.Address) (bool, error) {
	return _ImmutableCreate2Factory.Contract.HasBeenDeployed(&_ImmutableCreate2Factory.CallOpts, deploymentAddress)
}

// SafeCreate2 is a paid mutator transaction binding the contract method 0x64e03087.
//
// Solidity: function safeCreate2(bytes32 salt, bytes initializationCode) payable returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryTransactor) SafeCreate2(opts *bind.TransactOpts, salt [32]byte, initializationCode []byte) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.contract.Transact(opts, "safeCreate2", salt, initializationCode)
}

// SafeCreate2 is a paid mutator transaction binding the contract method 0x64e03087.
//
// Solidity: function safeCreate2(bytes32 salt, bytes initializationCode) payable returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactorySession) SafeCreate2(salt [32]byte, initializationCode []byte) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.SafeCreate2(&_ImmutableCreate2Factory.TransactOpts, salt, initializationCode)
}

// SafeCreate2 is a paid mutator transaction binding the contract method 0x64e03087.
//
// Solidity: function safeCreate2(bytes32 salt, bytes initializationCode) payable returns(address deploymentAddress)
func (_ImmutableCreate2Factory *ImmutableCreate2FactoryTransactorSession) SafeCreate2(salt [32]byte, initializationCode []byte) (*types.Transaction, error) {
	return _ImmutableCreate2Factory.Contract.SafeCreate2(&_ImmutableCreate2Factory.TransactOpts, salt, initializationCode)
}

func CreateImmutableCreate2FactoryDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ImmutableCreate2Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployImmutableCreate2Factory(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateFindCreate2AddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var salt [32]byte
	var saltRaw string
	var initCode []byte
	var initCodeRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "find-create-2-address",
		Short: "Call the FindCreate2Address view method on a ImmutableCreate2Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var saltIntermediate []byte

			var saltIntermediateHexDecodeErr error
			saltIntermediate, saltIntermediateHexDecodeErr = hex.DecodeString(saltRaw)
			if saltIntermediateHexDecodeErr != nil {
				return saltIntermediateHexDecodeErr
			}

			copy(salt[:], saltIntermediate)

			var initCodeIntermediate []byte

			var initCodeIntermediateHexDecodeErr error
			initCodeIntermediate, initCodeIntermediateHexDecodeErr = hex.DecodeString(initCodeRaw)
			if initCodeIntermediateHexDecodeErr != nil {
				return initCodeIntermediateHexDecodeErr
			}

			copy(initCode[:], initCodeIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewImmutableCreate2Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ImmutableCreate2FactoryCallerSession{
				Contract: &contract.ImmutableCreate2FactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FindCreate2Address(
				salt,
				initCode,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&saltRaw, "salt", "", "salt argument ([32]byte)")
	cmd.Flags().StringVar(&initCodeRaw, "init-code", "", "init-code argument ([]byte)")

	return cmd
}
func CreateFindCreate2AddressViaHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var salt [32]byte
	var saltRaw string
	var initCodeHash [32]byte
	var initCodeHashRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "find-create-2-address-via-hash",
		Short: "Call the FindCreate2AddressViaHash view method on a ImmutableCreate2Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var saltIntermediate []byte

			var saltIntermediateHexDecodeErr error
			saltIntermediate, saltIntermediateHexDecodeErr = hex.DecodeString(saltRaw)
			if saltIntermediateHexDecodeErr != nil {
				return saltIntermediateHexDecodeErr
			}

			copy(salt[:], saltIntermediate)

			var initCodeHashIntermediate []byte

			var initCodeHashIntermediateHexDecodeErr error
			initCodeHashIntermediate, initCodeHashIntermediateHexDecodeErr = hex.DecodeString(initCodeHashRaw)
			if initCodeHashIntermediateHexDecodeErr != nil {
				return initCodeHashIntermediateHexDecodeErr
			}

			copy(initCodeHash[:], initCodeHashIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewImmutableCreate2Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ImmutableCreate2FactoryCallerSession{
				Contract: &contract.ImmutableCreate2FactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FindCreate2AddressViaHash(
				salt,
				initCodeHash,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&saltRaw, "salt", "", "salt argument ([32]byte)")
	cmd.Flags().StringVar(&initCodeHashRaw, "init-code-hash", "", "init-code-hash argument ([32]byte)")

	return cmd
}
func CreateHasBeenDeployedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var deploymentAddress common.Address
	var deploymentAddressRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "has-been-deployed",
		Short: "Call the HasBeenDeployed view method on a ImmutableCreate2Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if deploymentAddressRaw == "" {
				return fmt.Errorf("--deployment-address argument not specified")
			} else if !common.IsHexAddress(deploymentAddressRaw) {
				return fmt.Errorf("--deployment-address argument is not a valid Ethereum address")
			}
			deploymentAddress = common.HexToAddress(deploymentAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewImmutableCreate2Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ImmutableCreate2FactoryCallerSession{
				Contract: &contract.ImmutableCreate2FactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.HasBeenDeployed(
				deploymentAddress,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&deploymentAddressRaw, "deployment-address", "", "deployment-address argument (common.Address)")

	return cmd
}

func CreateSafeCreate2Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var salt [32]byte
	var saltRaw string
	var initializationCode []byte
	var initializationCodeRaw string

	cmd := &cobra.Command{
		Use:   "safe-create-2",
		Short: "Execute the SafeCreate2 method on a ImmutableCreate2Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var saltIntermediate []byte

			var saltIntermediateHexDecodeErr error
			saltIntermediate, saltIntermediateHexDecodeErr = hex.DecodeString(saltRaw)
			if saltIntermediateHexDecodeErr != nil {
				return saltIntermediateHexDecodeErr
			}

			copy(salt[:], saltIntermediate)

			var initializationCodeIntermediate []byte

			var initializationCodeIntermediateHexDecodeErr error
			initializationCodeIntermediate, initializationCodeIntermediateHexDecodeErr = hex.DecodeString(initializationCodeRaw)
			if initializationCodeIntermediateHexDecodeErr != nil {
				return initializationCodeIntermediateHexDecodeErr
			}

			copy(initializationCode[:], initializationCodeIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewImmutableCreate2Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ImmutableCreate2FactoryTransactorSession{
				Contract:     &contract.ImmutableCreate2FactoryTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SafeCreate2(
				salt,
				initializationCode,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&saltRaw, "salt", "", "salt argument ([32]byte)")
	cmd.Flags().StringVar(&initializationCodeRaw, "initialization-code", "", "initialization-code argument ([]byte)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the IMMUTABLE_CREATE_2_FACTORY_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the IMMUTABLE_CREATE_2_FACTORY_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("IMMUTABLE_CREATE_2_FACTORY_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateImmutableCreate2FactoryCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "immutable-create-2-factory",
		Short: "Interact with the ImmutableCreate2Factory contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployImmutableCreate2Factory := CreateImmutableCreate2FactoryDeploymentCommand()
	cmdDeployImmutableCreate2Factory.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployImmutableCreate2Factory)

	cmdViewFindCreate2Address := CreateFindCreate2AddressCommand()
	cmdViewFindCreate2Address.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFindCreate2Address)
	cmdViewFindCreate2AddressViaHash := CreateFindCreate2AddressViaHashCommand()
	cmdViewFindCreate2AddressViaHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFindCreate2AddressViaHash)
	cmdViewHasBeenDeployed := CreateHasBeenDeployedCommand()
	cmdViewHasBeenDeployed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewHasBeenDeployed)

	cmdTransactSafeCreate2 := CreateSafeCreate2Command()
	cmdTransactSafeCreate2.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSafeCreate2)

	return cmd
}
