// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package CreateCall --cli --struct CreateCall --output bindings/CreateCall/CreateCall.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CreateCall

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CreateCallMetaData contains all meta data concerning the CreateCall contract.
var CreateCallMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractCreation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"deploymentData\",\"type\":\"bytes\"}],\"name\":\"performCreate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"deploymentData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"performCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061044b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634847be6f1461003b5780634c8c9ea114610134575b600080fd5b6101086004803603606081101561005157600080fd5b81019080803590602001909291908035906020019064010000000081111561007857600080fd5b82018360208201111561008a57600080fd5b803590602001918460018302840111640100000000831117156100ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610223565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101f76004803603604081101561014a57600080fd5b81019080803590602001909291908035906020019064010000000081111561017157600080fd5b82018360208201111561018357600080fd5b803590602001918460018302840111640100000000831117156101a557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061031d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008183518460200186f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436f756c64206e6f74206465706c6f7920636f6e74726163740000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a29392505050565b600081516020830184f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436f756c64206e6f74206465706c6f7920636f6e74726163740000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a29291505056fea2646970667358221220153dfbb31f5824b1a17183b88443b5d0771b935e8acd92186d58555a02e4b41f64736f6c63430007060033",
}

// CreateCallABI is the input ABI used to generate the binding from.
// Deprecated: Use CreateCallMetaData.ABI instead.
var CreateCallABI = CreateCallMetaData.ABI

// CreateCallBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CreateCallMetaData.Bin instead.
var CreateCallBin = CreateCallMetaData.Bin

// DeployCreateCall deploys a new Ethereum contract, binding an instance of CreateCall to it.
func DeployCreateCall(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CreateCall, error) {
	parsed, err := CreateCallMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CreateCallBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CreateCall{CreateCallCaller: CreateCallCaller{contract: contract}, CreateCallTransactor: CreateCallTransactor{contract: contract}, CreateCallFilterer: CreateCallFilterer{contract: contract}}, nil
}

// CreateCall is an auto generated Go binding around an Ethereum contract.
type CreateCall struct {
	CreateCallCaller     // Read-only binding to the contract
	CreateCallTransactor // Write-only binding to the contract
	CreateCallFilterer   // Log filterer for contract events
}

// CreateCallCaller is an auto generated read-only Go binding around an Ethereum contract.
type CreateCallCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateCallTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CreateCallTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateCallFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CreateCallFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateCallSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CreateCallSession struct {
	Contract     *CreateCall       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CreateCallCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CreateCallCallerSession struct {
	Contract *CreateCallCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CreateCallTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CreateCallTransactorSession struct {
	Contract     *CreateCallTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CreateCallRaw is an auto generated low-level Go binding around an Ethereum contract.
type CreateCallRaw struct {
	Contract *CreateCall // Generic contract binding to access the raw methods on
}

// CreateCallCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CreateCallCallerRaw struct {
	Contract *CreateCallCaller // Generic read-only contract binding to access the raw methods on
}

// CreateCallTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CreateCallTransactorRaw struct {
	Contract *CreateCallTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreateCall creates a new instance of CreateCall, bound to a specific deployed contract.
func NewCreateCall(address common.Address, backend bind.ContractBackend) (*CreateCall, error) {
	contract, err := bindCreateCall(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CreateCall{CreateCallCaller: CreateCallCaller{contract: contract}, CreateCallTransactor: CreateCallTransactor{contract: contract}, CreateCallFilterer: CreateCallFilterer{contract: contract}}, nil
}

// NewCreateCallCaller creates a new read-only instance of CreateCall, bound to a specific deployed contract.
func NewCreateCallCaller(address common.Address, caller bind.ContractCaller) (*CreateCallCaller, error) {
	contract, err := bindCreateCall(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CreateCallCaller{contract: contract}, nil
}

// NewCreateCallTransactor creates a new write-only instance of CreateCall, bound to a specific deployed contract.
func NewCreateCallTransactor(address common.Address, transactor bind.ContractTransactor) (*CreateCallTransactor, error) {
	contract, err := bindCreateCall(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CreateCallTransactor{contract: contract}, nil
}

// NewCreateCallFilterer creates a new log filterer instance of CreateCall, bound to a specific deployed contract.
func NewCreateCallFilterer(address common.Address, filterer bind.ContractFilterer) (*CreateCallFilterer, error) {
	contract, err := bindCreateCall(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CreateCallFilterer{contract: contract}, nil
}

// bindCreateCall binds a generic wrapper to an already deployed contract.
func bindCreateCall(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CreateCallMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateCall *CreateCallRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateCall.Contract.CreateCallCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateCall *CreateCallRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateCall.Contract.CreateCallTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateCall *CreateCallRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateCall.Contract.CreateCallTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateCall *CreateCallCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateCall.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateCall *CreateCallTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateCall.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateCall *CreateCallTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateCall.Contract.contract.Transact(opts, method, params...)
}

// PerformCreate is a paid mutator transaction binding the contract method 0x4c8c9ea1.
//
// Solidity: function performCreate(uint256 value, bytes deploymentData) returns(address newContract)
func (_CreateCall *CreateCallTransactor) PerformCreate(opts *bind.TransactOpts, value *big.Int, deploymentData []byte) (*types.Transaction, error) {
	return _CreateCall.contract.Transact(opts, "performCreate", value, deploymentData)
}

// PerformCreate is a paid mutator transaction binding the contract method 0x4c8c9ea1.
//
// Solidity: function performCreate(uint256 value, bytes deploymentData) returns(address newContract)
func (_CreateCall *CreateCallSession) PerformCreate(value *big.Int, deploymentData []byte) (*types.Transaction, error) {
	return _CreateCall.Contract.PerformCreate(&_CreateCall.TransactOpts, value, deploymentData)
}

// PerformCreate is a paid mutator transaction binding the contract method 0x4c8c9ea1.
//
// Solidity: function performCreate(uint256 value, bytes deploymentData) returns(address newContract)
func (_CreateCall *CreateCallTransactorSession) PerformCreate(value *big.Int, deploymentData []byte) (*types.Transaction, error) {
	return _CreateCall.Contract.PerformCreate(&_CreateCall.TransactOpts, value, deploymentData)
}

// PerformCreate2 is a paid mutator transaction binding the contract method 0x4847be6f.
//
// Solidity: function performCreate2(uint256 value, bytes deploymentData, bytes32 salt) returns(address newContract)
func (_CreateCall *CreateCallTransactor) PerformCreate2(opts *bind.TransactOpts, value *big.Int, deploymentData []byte, salt [32]byte) (*types.Transaction, error) {
	return _CreateCall.contract.Transact(opts, "performCreate2", value, deploymentData, salt)
}

// PerformCreate2 is a paid mutator transaction binding the contract method 0x4847be6f.
//
// Solidity: function performCreate2(uint256 value, bytes deploymentData, bytes32 salt) returns(address newContract)
func (_CreateCall *CreateCallSession) PerformCreate2(value *big.Int, deploymentData []byte, salt [32]byte) (*types.Transaction, error) {
	return _CreateCall.Contract.PerformCreate2(&_CreateCall.TransactOpts, value, deploymentData, salt)
}

// PerformCreate2 is a paid mutator transaction binding the contract method 0x4847be6f.
//
// Solidity: function performCreate2(uint256 value, bytes deploymentData, bytes32 salt) returns(address newContract)
func (_CreateCall *CreateCallTransactorSession) PerformCreate2(value *big.Int, deploymentData []byte, salt [32]byte) (*types.Transaction, error) {
	return _CreateCall.Contract.PerformCreate2(&_CreateCall.TransactOpts, value, deploymentData, salt)
}

// CreateCallContractCreationIterator is returned from FilterContractCreation and is used to iterate over the raw logs and unpacked data for ContractCreation events raised by the CreateCall contract.
type CreateCallContractCreationIterator struct {
	Event *CreateCallContractCreation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CreateCallContractCreationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CreateCallContractCreation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CreateCallContractCreation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CreateCallContractCreationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CreateCallContractCreationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CreateCallContractCreation represents a ContractCreation event raised by the CreateCall contract.
type CreateCallContractCreation struct {
	NewContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContractCreation is a free log retrieval operation binding the contract event 0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511.
//
// Solidity: event ContractCreation(address indexed newContract)
func (_CreateCall *CreateCallFilterer) FilterContractCreation(opts *bind.FilterOpts, newContract []common.Address) (*CreateCallContractCreationIterator, error) {

	var newContractRule []interface{}
	for _, newContractItem := range newContract {
		newContractRule = append(newContractRule, newContractItem)
	}

	logs, sub, err := _CreateCall.contract.FilterLogs(opts, "ContractCreation", newContractRule)
	if err != nil {
		return nil, err
	}
	return &CreateCallContractCreationIterator{contract: _CreateCall.contract, event: "ContractCreation", logs: logs, sub: sub}, nil
}

// WatchContractCreation is a free log subscription operation binding the contract event 0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511.
//
// Solidity: event ContractCreation(address indexed newContract)
func (_CreateCall *CreateCallFilterer) WatchContractCreation(opts *bind.WatchOpts, sink chan<- *CreateCallContractCreation, newContract []common.Address) (event.Subscription, error) {

	var newContractRule []interface{}
	for _, newContractItem := range newContract {
		newContractRule = append(newContractRule, newContractItem)
	}

	logs, sub, err := _CreateCall.contract.WatchLogs(opts, "ContractCreation", newContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CreateCallContractCreation)
				if err := _CreateCall.contract.UnpackLog(event, "ContractCreation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractCreation is a log parse operation binding the contract event 0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511.
//
// Solidity: event ContractCreation(address indexed newContract)
func (_CreateCall *CreateCallFilterer) ParseContractCreation(log types.Log) (*CreateCallContractCreation, error) {
	event := new(CreateCallContractCreation)
	if err := _CreateCall.contract.UnpackLog(event, "ContractCreation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateCreateCallDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new CreateCall contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployCreateCall(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreatePerformCreateCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var value0 *big.Int
	var value0Raw string
	var deploymentData []byte
	var deploymentDataRaw string

	cmd := &cobra.Command{
		Use:   "perform-create",
		Short: "Execute the PerformCreate method on a CreateCall contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			var deploymentDataIntermediate []byte

			var deploymentDataIntermediateHexDecodeErr error
			deploymentDataIntermediate, deploymentDataIntermediateHexDecodeErr = hex.DecodeString(deploymentDataRaw)
			if deploymentDataIntermediateHexDecodeErr != nil {
				return deploymentDataIntermediateHexDecodeErr
			}

			copy(deploymentData[:], deploymentDataIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewCreateCall(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := CreateCallTransactorSession{
				Contract:     &contract.CreateCallTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.PerformCreate(
				value0,
				deploymentData,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")
	cmd.Flags().StringVar(&deploymentDataRaw, "deployment-data", "", "deployment-data argument ([]byte)")

	return cmd
}
func CreatePerformCreate2Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var value0 *big.Int
	var value0Raw string
	var deploymentData []byte
	var deploymentDataRaw string
	var salt [32]byte
	var saltRaw string

	cmd := &cobra.Command{
		Use:   "perform-create-2",
		Short: "Execute the PerformCreate2 method on a CreateCall contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			var deploymentDataIntermediate []byte

			var deploymentDataIntermediateHexDecodeErr error
			deploymentDataIntermediate, deploymentDataIntermediateHexDecodeErr = hex.DecodeString(deploymentDataRaw)
			if deploymentDataIntermediateHexDecodeErr != nil {
				return deploymentDataIntermediateHexDecodeErr
			}

			copy(deploymentData[:], deploymentDataIntermediate)

			var saltIntermediate []byte

			var saltIntermediateHexDecodeErr error
			saltIntermediate, saltIntermediateHexDecodeErr = hex.DecodeString(saltRaw)
			if saltIntermediateHexDecodeErr != nil {
				return saltIntermediateHexDecodeErr
			}

			copy(salt[:], saltIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewCreateCall(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := CreateCallTransactorSession{
				Contract:     &contract.CreateCallTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.PerformCreate2(
				value0,
				deploymentData,
				salt,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")
	cmd.Flags().StringVar(&deploymentDataRaw, "deployment-data", "", "deployment-data argument ([]byte)")
	cmd.Flags().StringVar(&saltRaw, "salt", "", "salt argument ([32]byte)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the CREATE_CALL_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the CREATE_CALL_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("CREATE_CALL_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateCreateCallCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-call",
		Short: "Interact with the CreateCall contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployCreateCall := CreateCreateCallDeploymentCommand()
	cmdDeployCreateCall.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployCreateCall)

	cmdTransactPerformCreate := CreatePerformCreateCommand()
	cmdTransactPerformCreate.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPerformCreate)
	cmdTransactPerformCreate2 := CreatePerformCreate2Command()
	cmdTransactPerformCreate2.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPerformCreate2)

	return cmd
}
