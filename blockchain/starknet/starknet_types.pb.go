// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: blockchain/starknet/starknet_types.proto

package starknet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StarknetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FromAddress string   `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Keys        []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *StarknetEvent) Reset() {
	*x = StarknetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarknetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarknetEvent) ProtoMessage() {}

func (x *StarknetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarknetEvent.ProtoReflect.Descriptor instead.
func (*StarknetEvent) Descriptor() ([]byte, []int) {
	return file_blockchain_starknet_starknet_types_proto_rawDescGZIP(), []int{0}
}

func (x *StarknetEvent) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StarknetEvent) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *StarknetEvent) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Represents a single V3 transaction within a block.
// Docs: https://docs.starknet.io/architecture-and-concepts/network-architecture/transactions/
type StarknetTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                string           `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                                   // The hash of the transaction (transaction_hash)
	BlockNumber         uint64           `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // The block number the transaction is in
	Type                string           `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                   // One of transaction type: INVOKE, DECLARE, DEPLOY_ACCOUNT
	Version             uint64           `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Nonce               uint64           `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                        // The transaction nonce
	Signature           []string         `protobuf:"bytes,6,rep,name=signature,proto3" json:"signature,omitempty"`                                                 // Additional information given by the sender, used to validate the transaction
	MaxFee              uint64           `protobuf:"varint,7,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`                                        // The maximum fee that the sender is willing to pay for the transaction
	SenderAddress       string           `protobuf:"bytes,8,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`                    // [INVOKE, DECLARE] The address of the account initiating the transaction signature
	Calldata            []string         `protobuf:"bytes,9,rep,name=calldata,proto3" json:"calldata,omitempty"`                                                   // [INVOKE] The arguments that are passed to the validate and execute functions
	ConstructorCalldata []string         `protobuf:"bytes,10,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"` // [DEPLOY_ACCOUNT] The arguments to the account constructor
	ExecutionStatus     string           `protobuf:"bytes,11,opt,name=execution_status,json=executionStatus,proto3" json:"execution_status,omitempty"`             // Proceed only ACCEPTED_ON_L2 status
	FinalityStatus      string           `protobuf:"bytes,12,opt,name=finality_status,json=finalityStatus,proto3" json:"finality_status,omitempty"`                // Proceed only SUCCEEDED status
	Events              []*StarknetEvent `protobuf:"bytes,13,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *StarknetTransaction) Reset() {
	*x = StarknetTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarknetTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarknetTransaction) ProtoMessage() {}

func (x *StarknetTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarknetTransaction.ProtoReflect.Descriptor instead.
func (*StarknetTransaction) Descriptor() ([]byte, []int) {
	return file_blockchain_starknet_starknet_types_proto_rawDescGZIP(), []int{1}
}

func (x *StarknetTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StarknetTransaction) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StarknetTransaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StarknetTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StarknetTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *StarknetTransaction) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *StarknetTransaction) GetMaxFee() uint64 {
	if x != nil {
		return x.MaxFee
	}
	return 0
}

func (x *StarknetTransaction) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *StarknetTransaction) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *StarknetTransaction) GetConstructorCalldata() []string {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *StarknetTransaction) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *StarknetTransaction) GetFinalityStatus() string {
	if x != nil {
		return x.FinalityStatus
	}
	return ""
}

func (x *StarknetTransaction) GetEvents() []*StarknetEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// The price of L1 gas that was used while constructing the block. L1 gas prices apply to storage updates and L1â†’L2 messages. As of March 2023, computation is also priced in terms of L1 gas, but this will change in the future. The first Integer value is the price in wei. The second is the price in fri.
type StarknetBlockL1GasPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceInFri uint64 `protobuf:"varint,1,opt,name=price_in_fri,json=priceInFri,proto3" json:"price_in_fri,omitempty"`
	PriceInWei uint64 `protobuf:"varint,2,opt,name=price_in_wei,json=priceInWei,proto3" json:"price_in_wei,omitempty"`
}

func (x *StarknetBlockL1GasPrice) Reset() {
	*x = StarknetBlockL1GasPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarknetBlockL1GasPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarknetBlockL1GasPrice) ProtoMessage() {}

func (x *StarknetBlockL1GasPrice) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarknetBlockL1GasPrice.ProtoReflect.Descriptor instead.
func (*StarknetBlockL1GasPrice) Descriptor() ([]byte, []int) {
	return file_blockchain_starknet_starknet_types_proto_rawDescGZIP(), []int{2}
}

func (x *StarknetBlockL1GasPrice) GetPriceInFri() uint64 {
	if x != nil {
		return x.PriceInFri
	}
	return 0
}

func (x *StarknetBlockL1GasPrice) GetPriceInWei() uint64 {
	if x != nil {
		return x.PriceInWei
	}
	return 0
}

// Represents a block in the blockchain.
// Docs: https://docs.starknet.io/architecture-and-concepts/network-architecture/block-structure/
type StarknetBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber      uint64                   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // The block number
	Hash             string                   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`                                   // The hash of this block (block_hash)
	L1DaMode         string                   `protobuf:"bytes,3,opt,name=l1_da_mode,json=l1DaMode,proto3" json:"l1_da_mode,omitempty"`         // CALLDATA or BLOB, depending on how Starknet state diffs are sent to L1
	L1DataGasPrice   *StarknetBlockL1GasPrice `protobuf:"bytes,4,opt,name=l1_data_gas_price,json=l1DataGasPrice,proto3" json:"l1_data_gas_price,omitempty"`
	L1GasPrice       *StarknetBlockL1GasPrice `protobuf:"bytes,5,opt,name=l1_gas_price,json=l1GasPrice,proto3" json:"l1_gas_price,omitempty"`
	NewRoot          string                   `protobuf:"bytes,6,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	ParentHash       string                   `protobuf:"bytes,7,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"` // The hash of the blockâ€™s parent
	StarknetVersion  string                   `protobuf:"bytes,8,opt,name=starknet_version,json=starknetVersion,proto3" json:"starknet_version,omitempty"`
	SequencerAddress string                   `protobuf:"bytes,9,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"` // The Starknet address of the sequencer that created the block
	Status           string                   `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp        uint64                   `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`      // The time at which the sequencer began building the block, in seconds since the Unix epoch
	Transactions     []*StarknetTransaction   `protobuf:"bytes,12,rep,name=transactions,proto3" json:"transactions,omitempty"` // Transactions included in this block
}

func (x *StarknetBlock) Reset() {
	*x = StarknetBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarknetBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarknetBlock) ProtoMessage() {}

func (x *StarknetBlock) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarknetBlock.ProtoReflect.Descriptor instead.
func (*StarknetBlock) Descriptor() ([]byte, []int) {
	return file_blockchain_starknet_starknet_types_proto_rawDescGZIP(), []int{3}
}

func (x *StarknetBlock) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StarknetBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StarknetBlock) GetL1DaMode() string {
	if x != nil {
		return x.L1DaMode
	}
	return ""
}

func (x *StarknetBlock) GetL1DataGasPrice() *StarknetBlockL1GasPrice {
	if x != nil {
		return x.L1DataGasPrice
	}
	return nil
}

func (x *StarknetBlock) GetL1GasPrice() *StarknetBlockL1GasPrice {
	if x != nil {
		return x.L1GasPrice
	}
	return nil
}

func (x *StarknetBlock) GetNewRoot() string {
	if x != nil {
		return x.NewRoot
	}
	return ""
}

func (x *StarknetBlock) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *StarknetBlock) GetStarknetVersion() string {
	if x != nil {
		return x.StarknetVersion
	}
	return ""
}

func (x *StarknetBlock) GetSequencerAddress() string {
	if x != nil {
		return x.SequencerAddress
	}
	return ""
}

func (x *StarknetBlock) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StarknetBlock) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StarknetBlock) GetTransactions() []*StarknetTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type StarknetBlocksBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks      []*StarknetBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	SeerVersion string           `protobuf:"bytes,2,opt,name=seer_version,json=seerVersion,proto3" json:"seer_version,omitempty"`
}

func (x *StarknetBlocksBatch) Reset() {
	*x = StarknetBlocksBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarknetBlocksBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarknetBlocksBatch) ProtoMessage() {}

func (x *StarknetBlocksBatch) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_starknet_starknet_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarknetBlocksBatch.ProtoReflect.Descriptor instead.
func (*StarknetBlocksBatch) Descriptor() ([]byte, []int) {
	return file_blockchain_starknet_starknet_types_proto_rawDescGZIP(), []int{4}
}

func (x *StarknetBlocksBatch) GetBlocks() []*StarknetBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *StarknetBlocksBatch) GetSeerVersion() string {
	if x != nil {
		return x.SeerVersion
	}
	return ""
}

var File_blockchain_starknet_starknet_types_proto protoreflect.FileDescriptor

var file_blockchain_starknet_starknet_types_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x5d, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x57, 0x65,
	0x69, 0x22, 0xe9, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x31,
	0x5f, 0x64, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x31, 0x44, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x6c, 0x31, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6c,
	0x31, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x0c, 0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6c,
	0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x65, 0x72,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockchain_starknet_starknet_types_proto_rawDescOnce sync.Once
	file_blockchain_starknet_starknet_types_proto_rawDescData = file_blockchain_starknet_starknet_types_proto_rawDesc
)

func file_blockchain_starknet_starknet_types_proto_rawDescGZIP() []byte {
	file_blockchain_starknet_starknet_types_proto_rawDescOnce.Do(func() {
		file_blockchain_starknet_starknet_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockchain_starknet_starknet_types_proto_rawDescData)
	})
	return file_blockchain_starknet_starknet_types_proto_rawDescData
}

var file_blockchain_starknet_starknet_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_blockchain_starknet_starknet_types_proto_goTypes = []any{
	(*StarknetEvent)(nil),           // 0: StarknetEvent
	(*StarknetTransaction)(nil),     // 1: StarknetTransaction
	(*StarknetBlockL1GasPrice)(nil), // 2: StarknetBlockL1GasPrice
	(*StarknetBlock)(nil),           // 3: StarknetBlock
	(*StarknetBlocksBatch)(nil),     // 4: StarknetBlocksBatch
}
var file_blockchain_starknet_starknet_types_proto_depIdxs = []int32{
	0, // 0: StarknetTransaction.events:type_name -> StarknetEvent
	2, // 1: StarknetBlock.l1_data_gas_price:type_name -> StarknetBlockL1GasPrice
	2, // 2: StarknetBlock.l1_gas_price:type_name -> StarknetBlockL1GasPrice
	1, // 3: StarknetBlock.transactions:type_name -> StarknetTransaction
	3, // 4: StarknetBlocksBatch.blocks:type_name -> StarknetBlock
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_blockchain_starknet_starknet_types_proto_init() }
func file_blockchain_starknet_starknet_types_proto_init() {
	if File_blockchain_starknet_starknet_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blockchain_starknet_starknet_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StarknetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_starknet_starknet_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StarknetTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_starknet_starknet_types_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StarknetBlockL1GasPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_starknet_starknet_types_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StarknetBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_starknet_starknet_types_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StarknetBlocksBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockchain_starknet_starknet_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blockchain_starknet_starknet_types_proto_goTypes,
		DependencyIndexes: file_blockchain_starknet_starknet_types_proto_depIdxs,
		MessageInfos:      file_blockchain_starknet_starknet_types_proto_msgTypes,
	}.Build()
	File_blockchain_starknet_starknet_types_proto = out.File
	file_blockchain_starknet_starknet_types_proto_rawDesc = nil
	file_blockchain_starknet_starknet_types_proto_goTypes = nil
	file_blockchain_starknet_starknet_types_proto_depIdxs = nil
}
